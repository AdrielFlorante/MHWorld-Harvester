public class FertilizerEffect {
    public final boolean isYieldBoost;
    public final boolean isTimeReduction;
    public final boolean isAncientCatalyst;
    public final boolean isSoftSoil;
    public final String applicableType; // "Plant", "Mushroom", "Insect", or null for general

    public FertilizerEffect(boolean yieldBoost, boolean timeReduction, boolean ancientCatalyst, boolean softSoil, String type) {
        this.isYieldBoost = yieldBoost;
        this.isTimeReduction = timeReduction;
        this.isAncientCatalyst = ancientCatalyst;
        this.isSoftSoil = softSoil;
        this.applicableType = type;
    }

    public void applyEffect(CropState cropState, ActiveFertilizer active) {
        // Apply Soft Soil: extend all active fertilizers by +5
        if (isSoftSoil) {
            for (ActiveFertilizer af : cropState.activeFertilizers) {
                if (af != active) { // Don't apply to itself
                    af.remainingDuration += 5;
                }
            }
        }

        // Apply Ancient Catalyst: reduce timeLeft to 1
        if (isAncientCatalyst) {
            cropState.timeLeft = 1;
        }

        // Apply Catalyst: reduce timeLeft by 1 (min 1)
        else if (isTimeReduction) {
            cropState.timeLeft = Math.max(1, cropState.timeLeft - 1);
        }

        // Yield boost and type-based effects handled during yield calculation
        // So nothing else to do here for isYieldBoost
    }
}
